generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String?
  passwordHash       String?
  provider           String    @default("local")
  role               String    @default("user") // admin, manager, user (Admin > Manager > User hierarchy)
  permissions        String    @default("[]") // JSON array of custom permissions that override role permissions
  status             String    @default("active") // active, suspended, inactive
  department         String    @default("")
  jobTitle           String    @default("")
  phone              String    @default("")
  avatar             String    @default("")
  invitedBy          String?
  mustChangePassword Boolean   @default(false)
  lastLoginAt        DateTime?
  lastSeenAt         DateTime?

  // HR/Employee Fields
  employeeNumber   String?   @unique
  position         String    @default("")
  employmentDate   DateTime?
  idNumber         String    @default("")
  taxNumber        String?
  bankName         String?
  accountNumber    String?
  branchCode       String?
  salary           Float     @default(0)
  employmentStatus String    @default("Active") // Active, On Leave, Suspended, Resigned
  address          String    @default("")
  emergencyContact String    @default("")

  memberships   Membership[]
  ownedClients  Client[]     @relation("ClientOwner")
  ownedProjects Project[]    @relation("ProjectOwner")
  tasks         Task[]       @relation("TaskAssignee")
  auditLogs     AuditLog[]   @relation("AuditActor")
  feedback      Feedback[]   @relation("UserFeedback")
  sentMessages  Message[]    @relation("MessageSender")
  passwordResets PasswordReset[]
  calendarNotes CalendarNote[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Team {
  id          String       @id @default(cuid())
  name        String
  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Membership {
  userId String
  teamId String
  role   String @default("user")
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

model Client {
  id            String        @id @default(cuid())
  name          String
  type          String // "client" or "lead"
  industry      String        @default("Other")
  status        String        @default("Potential") // "Potential", "Active", "Disinterested" for leads; "active", "inactive" for clients
  stage         String        @default("Awareness") // AIDIA stage for leads
  revenue       Float         @default(0)
  value         Float         @default(0)
  probability   Int           @default(0)
  lastContact   DateTime      @default(now())
  address       String        @default("")
  website       String        @default("")
  notes         String        @default("")
  contacts      String        @default("[]")
  followUps     String        @default("[]")
  projectIds    String        @default("[]")
  comments      String        @default("[]")
  sites         String        @default("[]")
  contracts     String        @default("[]")
  activityLog   String        @default("[]")
  billingTerms  String        @default("{\"paymentTerms\":\"Net 30\",\"billingFrequency\":\"Monthly\",\"currency\":\"ZAR\",\"retainerAmount\":0,\"taxExempt\":false,\"notes\":\"\"}")
  proposals     String        @default("[]")
  services      String        @default("[]") // JSON array of service level tags
  thumbnail     String        @default("") // Image URL for client/lead thumbnail
  ownerId       String?
  owner         User?         @relation("ClientOwner", fields: [ownerId], references: [id])
  projects      Project[]
  invoices      Invoice[]
  opportunities Opportunity[]
  tags          ClientTag[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([createdAt])
  @@index([type])
  @@index([status])
  @@index([ownerId])
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  color       String      @default("#3B82F6") // Default blue color
  description String      @default("")
  ownerId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clients     ClientTag[]

  @@index([name])
  @@index([ownerId])
}

model ClientTag {
  id        String   @id @default(cuid())
  clientId  String
  tagId     String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([clientId, tagId])
  @@index([clientId])
  @@index([tagId])
}

model Project {
  id          String    @id @default(cuid())
  clientId    String?
  name        String
  description String    @default("")
  clientName  String    @default("")
  status      String    @default("Planning")
  startDate   DateTime  @default(now())
  dueDate     DateTime?
  budget      Float     @default(0)
  actualCost  Float     @default(0)
  progress    Int       @default(0)
  priority    String    @default("Medium")
  type        String    @default("Project")
  assignedTo  String    @default("")

  // JSON fields for complex data
  tasksList              String @default("[]")
  taskLists              String @default("[]")
  customFieldDefinitions String @default("[]")
  documents              String @default("[]")
  comments               String @default("[]")
  activityLog            String @default("[]")
  team                   String @default("[]")
  notes                  String @default("")

  // Document Collection Process fields
  hasDocumentCollectionProcess Boolean @default(false)
  documentSections             String  @default("[]")

  ownerId     String?
  owner       User?       @relation("ProjectOwner", fields: [ownerId], references: [id])
  client      Client?     @relation(fields: [clientId], references: [id])
  tasks       Task[]
  invoices    Invoice[]
  timeEntries TimeEntry[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([clientId])
  @@index([status])
  @@index([ownerId])
  @@index([createdAt])
}

model Opportunity {
  id        String   @id @default(cuid())
  clientId  String
  title     String
  stage     String   @default("Awareness") // AIDA pipeline stage
  value     Float    @default(0)
  ownerId   String?
  client    Client   @relation(fields: [clientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String    @id @default(cuid())
  clientId      String?
  projectId     String?
  invoiceNumber String    @unique
  clientName    String    @default("")
  issueDate     DateTime  @default(now())
  dueDate       DateTime?
  status        String    @default("Draft")
  subtotal      Float     @default(0)
  tax           Float     @default(0)
  total         Float     @default(0)
  balance       Float     @default(0)
  items         String    @default("[]")
  notes         String    @default("")
  ownerId       String?
  client        Client?   @relation(fields: [clientId], references: [id])
  project       Project?  @relation(fields: [projectId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Task {
  id           String    @id @default(cuid())
  projectId    String
  parentTaskId String?
  title        String
  status       String    @default("todo")
  assigneeId   String?
  dueDate      DateTime?
  project      Project   @relation(fields: [projectId], references: [id])
  assignee     User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask   Task?     @relation("Subtasks", fields: [parentTaskId], references: [id])
  subtasks     Task[]    @relation("Subtasks")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model TimeEntry {
  id          String   @id @default(cuid())
  projectId   String?
  date        DateTime @default(now())
  hours       Float
  projectName String   @default("")
  task        String   @default("")
  description String   @default("")
  employee    String   @default("")
  billable    Boolean  @default(true)
  rate        Float    @default(0)
  ownerId     String?
  project     Project? @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String
  entityId  String
  diff      String?
  actor     User     @relation("AuditActor", fields: [actorId], references: [id])
  createdAt DateTime @default(now())
}

model Invitation {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String
  role       String    @default("user") // admin, manager, user (Admin > Manager > User hierarchy)
  token      String    @unique
  status     String    @default("pending") // pending, accepted, expired, cancelled
  invitedBy  String?
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// User feedback on pages/sections for product/dev
model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  pageUrl   String
  section   String   @default("")
  message   String
  type      String   @default("feedback") // feedback | bug | idea
  severity  String   @default("medium") // low | medium | high
  meta      String?
  user      User?    @relation("UserFeedback", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  
  @@index([pageUrl])
  @@index([section])
  @@index([userId])
  @@index([createdAt])
}

// Teams Knowledge Hub Models
model TeamDocument {
  id          String   @id @default(cuid())
  team        String // Team ID (management, technical, etc.)
  title       String
  category    String   @default("General")
  description String   @default("")
  content     String   @default("")
  version     String   @default("1.0")
  status      String   @default("Draft") // Draft, Published, Archived
  tags        String   @default("[]")
  attachments String   @default("[]")
  createdBy   String   @default("")
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamWorkflow {
  id          String   @id @default(cuid())
  team        String // Team ID
  title       String
  description String   @default("")
  status      String   @default("Draft") // Draft, Active, Archived
  steps       String   @default("[]")
  tags        String   @default("[]")
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamChecklist {
  id          String   @id @default(cuid())
  team        String // Team ID
  title       String
  description String   @default("")
  category    String   @default("General")
  frequency   String   @default("One-time") // One-time, Daily, Weekly, Monthly
  items       String   @default("[]")
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamNotice {
  id        String   @id @default(cuid())
  team      String // Team ID
  title     String
  content   String
  priority  String   @default("Normal") // Low, Normal, Medium, High, Critical
  author    String   @default("")
  date      DateTime @default(now())
  ownerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkflowExecution {
  id             String   @id @default(cuid())
  workflowId     String
  workflowTitle  String
  team           String // Team ID
  completedSteps String   @default("[]")
  notes          String   @default("")
  executedBy     String   @default("")
  executionDate  DateTime @default(now())
  status         String   @default("Completed") // In Progress, Completed, Failed
  ownerId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TeamTask {
  id          String   @id @default(cuid())
  team        String // Team ID (management, technical, etc.)
  title       String
  description String   @default("")
  status      String   @default("todo") // todo, in-progress, completed, blocked
  priority    String   @default("Medium") // Low, Medium, High, Critical
  assigneeId  String?
  dueDate     DateTime?
  tags        String   @default("[]")
  attachments String   @default("[]")
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Manufacturing Models
model InventoryItem {
  id            String   @id @default(cuid())
  sku           String
  name          String
  thumbnail     String   @default("")
  category      String   @default("components") // components, packaging, accessories, finished_goods, work_in_progress
  type          String   @default("raw_material") // raw_material, finished_good, wip
  quantity      Float    @default(0)
  unit          String   @default("pcs")
  reorderPoint  Float    @default(0)
  reorderQty    Float    @default(0)
  location      String   @default("")
  unitCost      Float    @default(0)
  totalValue    Float    @default(0)
  supplier      String   @default("")
  supplierPartNumbers String @default("[]") // JSON array of {supplier: string, partNumber: string}
  legacyPartNumber String @default("")
  status        String   @default("in_stock") // in_stock, low_stock, out_of_stock, in_production
  lastRestocked DateTime?
  ownerId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([sku])
  @@index([category])
  @@index([status])
  @@index([ownerId])
}

model BOM {
  id                String   @id @default(cuid())
  productSku        String
  productName       String
  version           String   @default("1.0")
  status            String   @default("active") // active, draft
  effectiveDate     DateTime @default(now())
  laborCost         Float    @default(0)
  overheadCost      Float    @default(0)
  totalMaterialCost Float    @default(0)
  totalCost         Float    @default(0)
  estimatedTime    Int      @default(0)
  components        String   @default("[]") // JSON array of components
  notes             String   @default("")
  ownerId           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([productSku])
  @@index([status])
  @@index([ownerId])
}

model ProductionOrder {
  id              String    @id @default(cuid())
  bomId           String    @default("")
  productSku      String
  productName     String
  quantity        Int       @default(0)
  quantityProduced Int      @default(0)
  status          String    @default("in_progress") // in_progress, completed, cancelled
  priority        String    @default("normal") // low, normal, high
  startDate       DateTime  @default(now())
  targetDate      DateTime?
  completedDate   DateTime?
  assignedTo      String    @default("")
  totalCost       Float     @default(0)
  notes           String    @default("")
  createdBy       String    @default("")
  ownerId         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([status])
  @@index([bomId])
  @@index([ownerId])
}

model StockMovement {
  id           String   @id @default(cuid())
  movementId   String   // Human-readable ID like "MOV001"
  date         DateTime  @default(now())
  type         String   // consumption, receipt, production, transfer, adjustment
  itemName     String
  sku          String
  quantity     Float
  fromLocation String   @default("")
  toLocation   String   @default("")
  reference    String   @default("") // Reference to order, production, etc.
  performedBy  String   @default("")
  notes        String   @default("")
  ownerId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([date])
  @@index([type])
  @@index([sku])
  @@index([ownerId])
}

// Physical stock locations (warehouses, vehicles, stores)
model StockLocation {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  type        String   @default("warehouse") // warehouse, vehicle, store, site
  status      String   @default("active")
  address     String   @default("")
  contactPerson String @default("")
  contactPhone String  @default("")
  meta        String   @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  inventory   LocationInventory[]

  @@index([type])
  @@index([status])
}

// Inventory quantity per location by SKU
model LocationInventory {
  id          String   @id @default(cuid())
  locationId  String
  sku         String
  itemName    String
  quantity    Float    @default(0)
  unitCost    Float    @default(0)
  reorderPoint Float   @default(0)
  lastRestocked DateTime?
  status      String   @default("in_stock")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  location    StockLocation @relation(fields: [locationId], references: [id])

  @@unique([locationId, sku])
  @@index([sku])
  @@index([locationId])
}

model Supplier {
  id            String   @id @default(cuid())
  code          String   @default("")
  name          String
  contactPerson String   @default("")
  email         String   @default("")
  phone         String   @default("")
  website       String   @default("")
  address       String   @default("")
  paymentTerms  String   @default("Net 30")
  status        String   @default("active") // active, inactive
  notes         String   @default("")
  ownerId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([name])
  @@index([status])
  @@index([ownerId])
}

// Employee Chat Messages
model Message {
  id        String   @id @default(cuid())
  senderId String
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([createdAt])
  @@index([read])
}

// Password reset tokens for forgot-password flow
model PasswordReset {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  token      String   @unique
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

// Calendar Notes - User-specific daily notes
model CalendarNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime // Date of the note (date only, no time)
  note      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date]) // One note per user per date
  @@index([userId])
  @@index([date])
}
