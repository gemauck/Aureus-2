generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  passwordHash  String?
  provider      String       @default("local")
  role          String       @default("member")
  status        String       @default("active")
  invitedBy     String?
  lastLoginAt   DateTime?
  memberships   Membership[]
  ownedClients  Client[]     @relation("ClientOwner")
  ownedProjects Project[]    @relation("ProjectOwner")
  tasks         Task[]       @relation("TaskAssignee")
  auditLogs     AuditLog[]   @relation("AuditActor")
  feedback      Feedback[]   @relation("UserFeedback")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Team {
  id          String       @id @default(cuid())
  name        String
  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Membership {
  userId String
  teamId String
  role   String @default("member")
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

model Client {
  id            String        @id @default(cuid())
  name          String
  type          String // "client" or "lead"
  industry      String        @default("Other")
  status        String        @default("active")
  stage         String        @default("Awareness") // AIDIA stage for leads
  revenue       Float         @default(0)
  value         Float         @default(0)
  probability   Int           @default(0)
  lastContact   DateTime      @default(now())
  address       String        @default("")
  website       String        @default("")
  notes         String        @default("")
  contacts      String        @default("[]")
  followUps     String        @default("[]")
  projectIds    String        @default("[]")
  comments      String        @default("[]")
  sites         String        @default("[]")
  contracts     String        @default("[]")
  activityLog   String        @default("[]")
  billingTerms  String        @default("{\"paymentTerms\":\"Net 30\",\"billingFrequency\":\"Monthly\",\"currency\":\"ZAR\",\"retainerAmount\":0,\"taxExempt\":false,\"notes\":\"\"}")
  ownerId       String?
  owner         User?         @relation("ClientOwner", fields: [ownerId], references: [id])
  projects      Project[]
  invoices      Invoice[]
  opportunities Opportunity[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Project {
  id                     String      @id @default(cuid())
  clientId               String?
  name                   String
  description            String      @default("")
  clientName             String      @default("")
  status                 String      @default("Planning")
  startDate              DateTime    @default(now())
  dueDate                DateTime?
  budget                 Float       @default(0)
  actualCost             Float       @default(0)
  progress               Int         @default(0)
  priority               String      @default("Medium")
  type                   String      @default("Project")
  assignedTo             String      @default("")
  
  // JSON fields for complex data
  tasksList              String      @default("[]")
  taskLists              String      @default("[]")
  customFieldDefinitions String      @default("[]")
  documents              String      @default("[]")
  comments               String      @default("[]")
  activityLog            String      @default("[]")
  team                   String      @default("[]")
  notes                  String      @default("")
  
  ownerId                String?
  owner                  User?       @relation("ProjectOwner", fields: [ownerId], references: [id])
  client                 Client?     @relation(fields: [clientId], references: [id])
  tasks                  Task[]
  invoices               Invoice[]
  timeEntries            TimeEntry[]
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
}

model Employee {
  id               String   @id @default(cuid())
  employeeNumber   String   @unique
  name             String
  email            String   @unique
  phone            String   @default("")
  position         String   @default("")
  department       String   @default("")
  employmentDate   DateTime @default(now())
  idNumber         String   @default("")
  taxNumber        String?
  bankName         String?
  accountNumber    String?
  branchCode       String?
  salary           Float    @default(0)
  status           String   @default("Active")
  address          String   @default("")
  emergencyContact String   @default("")
  ownerId          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Opportunity {
  id        String   @id @default(cuid())
  clientId  String
  title     String
  stage     String   @default("prospect")
  value     Float    @default(0)
  ownerId   String?
  client    Client   @relation(fields: [clientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String    @id @default(cuid())
  clientId      String?
  projectId     String?
  invoiceNumber String    @unique
  clientName    String    @default("")
  issueDate     DateTime  @default(now())
  dueDate       DateTime?
  status        String    @default("Draft")
  subtotal      Float     @default(0)
  tax           Float     @default(0)
  total         Float     @default(0)
  balance       Float     @default(0)
  items         String    @default("[]")
  notes         String    @default("")
  ownerId       String?
  client        Client?   @relation(fields: [clientId], references: [id])
  project       Project?  @relation(fields: [projectId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Task {
  id           String    @id @default(cuid())
  projectId    String
  parentTaskId String?
  title        String
  status       String    @default("todo")
  assigneeId   String?
  dueDate      DateTime?
  project      Project   @relation(fields: [projectId], references: [id])
  assignee     User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask   Task?     @relation("Subtasks", fields: [parentTaskId], references: [id])
  subtasks     Task[]    @relation("Subtasks")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model TimeEntry {
  id          String   @id @default(cuid())
  projectId   String?
  date        DateTime @default(now())
  hours       Float
  projectName String   @default("")
  task        String   @default("")
  description String   @default("")
  employee    String   @default("")
  billable    Boolean  @default(true)
  rate        Float    @default(0)
  ownerId     String?
  project     Project? @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String
  entityId  String
  diff      String?
  actor     User     @relation("AuditActor", fields: [actorId], references: [id])
  createdAt DateTime @default(now())
}

model Invitation {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String
  role       String    @default("user")
  token      String    @unique
  status     String    @default("pending") // pending, accepted, expired, cancelled
  invitedBy  String?
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// User feedback on pages/sections for product/dev
model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  pageUrl   String
  section   String   @default("")
  message   String
  type      String   @default("feedback") // feedback | bug | idea
  severity  String   @default("medium") // low | medium | high
  meta      String?
  user      User?    @relation("UserFeedback", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
